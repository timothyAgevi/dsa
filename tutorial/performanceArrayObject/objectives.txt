objectives
1.how objects  and arrays work thru big O.
2.explaing why adding elements to the beggining of arry is costly.
3.Compare and contracts runtime for arrays and objects ,as well as built in methods.


when to use objects 
-dont need ordering
-fast access/insertion and removal.

#Big O of object 
1.insertion -o(1)
2.removal-o(1)
3.access -o(1)
4.searching -o(n) ,e,g if info is in a  value  

#big o of object methods
1.object.keys -o(n)
2.object .values - 0(n)
3.object.entries - o(n)
4.hasOwnProperty - o(1),true,false

##arrays
wwhen need ordering-
-fast acess/insertion and removal(sort of ..)
#Big O of Arrays
1.insertion- depends .
2.Removal - depends .
3.Searching -o(n)
4.acess-o(1)
n.b searching in arrays and objects:o(n)while acessing is big o(1)
    - inserting removing at the end:constant 
                             the start o(n)
    - push snd pop fasterthan shift ,unshift unless in empty array.                  

#nbig o of array methods 
1.push -o(1) adds to end of array
2.pop -0(1) removes the last element from an array and returns that element.
3.shift -o(n),removes the first element from an array and returns the removed element
4. unshift -o(n),adds one or more elements to the beginning of an array and returns the new length of the array.
5.concat -o(n),joins strings and returns new string.
6.slice- o(n),returns the extracted part in a new string.new array is returned
7.splice-o(n),add/ removes element of an array.parameters(index,howmany,itemx..i,temX)
8.sort -o (n *log n),
9.forEach,map,filter,reduce - o(n)